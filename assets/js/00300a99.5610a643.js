"use strict";(self.webpackChunktik_wiki=self.webpackChunktik_wiki||[]).push([[2441],{1339:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"bitwise","title":"bitwise","description":"Assume variable A = 2 and B = 3.","source":"@site/docs/bitwise.md","sourceDirName":".","slug":"/bitwise","permalink":"/docs/bitwise","draft":false,"unlisted":false,"editUrl":"https://github.com/TikTzuki/tiktzuki.github.io/tree/master/docs/bitwise.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"TikTuzki","permalink":"/docs/"},"next":{"title":"Fundamentals","permalink":"/docs/fundamentals"}}');var s=i(4848),r=i(8453);const o={},d=void 0,a={},l=[];function c(e){const t={p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Assume variable A = 2 and B = 3.\nA = 0010\nB = 0011"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Operator"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"& (AND)"}),(0,s.jsx)(t.td,{children:"It performs a Boolean AND operation on each bit of its integer arguments."}),(0,s.jsx)(t.td,{children:"(A & B) is 2"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"| (OR)"}),(0,s.jsx)(t.td,{children:"It performs a Boolean OR operation on each bit of its integer arguments."}),(0,s.jsx)(t.td,{children:"(A | B) is 3"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"& (XOR)"}),(0,s.jsx)(t.td,{children:"It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both."}),(0,s.jsx)(t.td,{children:"(A ^ B) is 1"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"!(NOT)"}),(0,s.jsx)(t.td,{children:"It is a unary operator and operates by reversing all the bits in the operand."}),(0,s.jsx)(t.td,{children:"(!A ) is -3"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"<< (Left Shift)"}),(0,s.jsx)(t.td,{children:"It moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on."}),(0,s.jsx)(t.td,{children:"(A << 1) is 4"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:">> (Right Shift)"}),(0,s.jsx)(t.td,{children:"Binary Right Shift Operator. The left operand\u2019s value is moved right by the number of bits specified by the right operand."}),(0,s.jsx)(t.td,{children:"(A >> 1) is 1"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>d});var n=i(6540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);